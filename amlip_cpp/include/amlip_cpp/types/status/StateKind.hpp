
// Copyright 2022 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @file StateKind.hpp
 *
 * This is an autogenerated file from command:
 *  enumeration_builder.py
 *   -n eprosima;amlip;types
 *   -e StateKind
 *   -v unknown , running , stopped , dropped
 *   -o .../StateKind.hpp
 */

#pragma once

#include <array>
#include <string>
#include <stdexcept>
#include <vector>

namespace eprosima {
namespace amlip {
namespace types {

enum class StateKind
{
    unknown,
    running,
    stopped,
    dropped
};

const std::array<std::string, 4> NAMES_StateKind =
{
    "unknown",
    "running",
    "stopped",
    "dropped"
};

inline const std::string& to_string(
        const StateKind& e)
{
    return NAMES_StateKind[static_cast<int>(e)];
}

inline std::vector<std::string> string_vector_StateKind()
{
    return std::vector<std::string> (
        NAMES_StateKind.begin(),
        NAMES_StateKind.end());
}

inline StateKind from_string_StateKind(
        const std::string& s)
{
    for (int i = 0; i < 4; i++)
    {
        if (NAMES_StateKind[i] == s)
        {
            return static_cast<StateKind>(i);
        }
    }
    throw std::invalid_argument("Incorrect name for enum StateKind.");
}

inline std::ostream& operator <<(
        std::ostream& os,
        const StateKind& e)
{
    os << to_string(e);
    return os;
}

constexpr const unsigned int N_VALUES_StateKind = 4;

} /* namespace types */
} /* namespace amlip */
} /* namespace eprosima */
